choices=c("SparCC"="Sparcc","SPRING"="Spring")),
selectInput(inputId = "CattleParameter",label="Select Cattle Parameter",
choices=c("Cattle Breed"="Breed","Lactation Phase"="Phase")),
selectInput(inputId = "LactationPhase",label="Select Lactation Phase",
choices=c("Early Phase"="EarlyPhase","Mid Phase"="MidPhase","Late Phase"="LatePhase","Dry Phase"="DryPhase")),
textOutput("result")
),
mainPanel(#h3(strong("View Network",align="center",style="color:blue")),
#strong("Let's see how to make these networks"),
textOutput("selected_var"),
br(),
#img(src=Method+"_"+CattleParameter+"_"+LactationPhase+".png")
)
)
#writeLines(Me,"output.txt")
# Loading required packages
library(tidyverse)
library(phyloseq)
library(qiime2R)
library(BiocManager)
library(microbiome)
library(NetCoMi)
library(WGCNA)
# Setting the working directory
setwd("C:\\Users\\Anushka\\Desktop\\Anushka\\Research\\Methodology")
#Phyloseq2*****************************************************************************************************************
#Adding .qza files to phyloseq object
physeq=qza_to_phyloseq(
features = "datafiles/table.qza",
taxonomy="datafiles/taxonomy.qza",
)
#Reading the meta data
metx=read.delim("datafiles/metadata_table.txt",sep=",",header=T,row.names=sample_names(physeq))
#head(metx)
#Meta data as sample data
metx=metx[,-1]
metx=sample_data(metx)
#metx
#Merging the sample
complete_physeq=merge_phyloseq(physeq,metx)
#complete_physeq
#aggregating taxa in the genus level
complete_agg <- tax_glom(complete_physeq, 'Genus')
#complete_agg
tax_table(complete_agg)
complete_agg <- aggregate_taxa(complete_agg, 'Genus')
complete_agg
# keep only taxa that were ....................................................
minTotRelAbun <- 5e-5
sums <- taxa_sums(complete_agg)
#sums
keepTaxa <- taxa_names(complete_agg)[which((sums / sum(sums)) > minTotRelAbun)]
#keepTaxa
filt_complete_agg <- prune_taxa(keepTaxa, complete_agg)
filt_complete_agg
# select data of Different Lactation Phases.
Early_physeq <- subset_samples(filt_complete_agg, LactationPhase =="Early")
Late_physeq <- subset_samples(filt_complete_agg, LactationPhase =="Late")
Mid_physeq <- subset_samples(filt_complete_agg, LactationPhase =="Mid")
Dry_physeq <- subset_samples(filt_complete_agg, LactationPhase =="Dry")
# select data of different Cattle Breeds
FJC_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Friesian-Jersey_cross")
FC_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Friesian_cross")
SC_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Sahiwal_cross")
JSC_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Jersey-Sahiwal_cross")
BC_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Local_crossbreds(Batu_cross)")
FSC_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Friesian-Sahiwal_cross")
AFS_physeq <- subset_samples(filt_complete_agg, CattleBreed =="AFS")
JC_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Jersey_cross")
S_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Sahiwal")
A_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Ayrshire")
J_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Jersey")
# Saving the phyloseq objects for lactation phases
saveRDS(complete_physeq, "Phase/Complete data.rds")
saveRDS(complete_agg, "Phase/Aggregated data.rds")
saveRDS(filt_complete_agg, "Phase/Filtered Aggregated data.rds")
saveRDS(Early_physeq, "Phase/Early Phase.rds")
saveRDS(Late_physeq, "Phase/Late Phase.rds")
saveRDS(Mid_physeq, "Phase/Mid Phase.rds")
saveRDS(Dry_physeq, "Phase/Dry Phase.rds")
# Saving the phyloseq objects for carrle breeds
saveRDS(FJC_physeq, "Breed/FJC Breed.rds")
saveRDS(FC_physeq, "Breed/FC Breed.rds")
saveRDS(SC_physeq, "Breed/SC Breed.rds")
saveRDS(JSC_physeq, "Breed/JSC Breed.rds")
saveRDS(BC_physeq, "Breed/BC Breed.rds")
saveRDS(FSC_physeq, "Breed/FSC Breed.rds")
saveRDS(AFS_physeq, "Breed/AFS Breed.rds")
saveRDS(JC_physeq, "Breed/JC Breed.rds")
saveRDS(S_physeq, "Breed/S Breed.rds")
saveRDS(A_physeq, "Breed/A Breed.rds")
saveRDS(J_physeq, "Breed/J Breed.rds")
constructNetwork=function(method,par,subpar){
Data <- readRDS(paste(par,"/",subpar," ",par,".rds",sep=""))
Data
if(method=="sparcc"){
net_single <- netConstruct(Data,
verbose = 3,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 100),
# filtTax = "none",
# filtTaxPar = "totalReads",
filtSamp = "totalReads",
filtSampPar = list(totalReads = 1000),
zeroMethod = "none", normMethod = "none",
measure = "sparcc",
sparsMethod = "threshold", thresh = 0.4,
dissFunc = "signed",
seed = 123456)
}
else if(method=="spring"){
net_single <- netConstruct(Data, verbose = 3,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 100),
#filtTax = "none",
#filtTaxPar = "totalReads",
filtSamp = "totalReads",
filtSampPar = list(totalReads = 1000),
zeroMethod = "none", normMethod = "none",
measure = "spring",
measurePar = list(nlambda = 20,
rep.num = 20,
thresh = 0.1,
subsample.ratio = 0.8, # 10*sqrt(n)/n for n > 144
lambda.min.ratio = 0.01,
lambdaseq = "data-specific",
ncores=1),
sparsMethod = "none",  dissFunc = "signed",
seed = 123456)
}
saveRDS(net_single,paste(par,"/",subpar," ",par,"/",subpar,"_",method," network.rds",sep=""))
props_single <- netAnalyze(net_single,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
hubQuant = 0.95)
saveRDS(props_single,paste(par,"/",subpar," ",par,"/",subpar,"_",method," analysis.rds",sep=""))
#?summary.microNetProps
net.summary <- summary(props_single)
net.summary
p <- plot(props_single,
shortenLabels = "none",
# labelLength = 16,
# charToRm = "g__",
labelScale = FALSE,
rmSingles = "all",
nodeSize = "eigenvector",
nodeColor = "cluster",
hubBorderCol = "blue",
cexNodes = 1,
cexLabels = 0.5,
edgeWidth = 1,
highlightHubs = TRUE,
cexHubs = 1.5,
# cexHubLabels = 2,
title1 = paste(subpar," ",par," Network on genus level with SparCC Method.",sep=""),
showTitle = TRUE,
cexTitle = 1.5)
saveRDS(p, paste(par,"/",subpar," ",par,"/",subpar,"_",method," plot.rds",sep=""))
}
constructNetwork(Me,Pa,Sp)
rstudioapi::savePlotAsImage("./my_app/Images3/res.png",width=850,height=550)
# source("C:\\Users\\Anushka\\Desktop\\Anushka\\Research\\Methodology\\my_app\\TestShiny.R")
#
# #Print User Input
# #install.packages("shiny")
# library(shiny)
# #install.packages("shinythemes")
# library(shinythemes)
# #library(shinyjs)
#
# #jscode <- "shinyjs.closeWindow = function() { window.close(); }"
#
# # Loading required packages
# library(tidyverse)
# library(phyloseq)
# library(qiime2R)
# library(BiocManager)
# library(microbiome)
# library(NetCoMi)
# library(WGCNA)
#
# setwd("C:\\Users\\Anushka\\Desktop\\Anushka\\Research\\Methodology\\my_app")
#
# #Define UI
# ui<-fluidPage(
#   theme = shinythemes::shinytheme("cerulean"),
#   titlePanel(h1(strong("Microbial Co-Occurrence Networks"))),
#
#   sidebarLayout(
#     position = "left",
#     sidebarPanel(h2(strong("Construct Networks")),
#                  br(),
#                  textInput(inputId="Me",label="Network Construction Method"),
#                  textInput(inputId="Pa",label="Select Variable"),
#                  textInput(inputId="Sp",label="Select Sub-Variable"),
#
#                  #titlePanel("Construct Network"),
#                  #useShinyjs(),
#                  #extendShinyjs(text = jscode, functions = c("closeWindow")),
#                  actionButton("script", "Build Network"),
#                  br(),br(),
#
#
#                  h2(strong("Visualize Networks")),
#
#                  radioButtons(inputId="Taxa",label="Select Taxa",
#                               choices=c("Genus"="Genus","Family"="Family","Order"="Order","Class"="Class")),
#
#                  radioButtons(inputId="Folder2",label="Select Image Type for Cattle Breed",
#                                     choices=c("R(All)"="I_R_All","R(Top100)"="I_R_Top100","Cytoscape(All)"="I_Cytoscape_All","Cytoscape(Top100)"="I_Cytoscape_Top100")),
#
#                  selectInput(inputId = "Method2",label="Select Network Construction Method for Cattle Breed",
#                              choices=c("SparCC"="Sparcc","SPRING"="Spring")),
#
#                  selectInput(inputId = "CattleBreed",label="Select Cattle Breed",
#                              choices=c("FJC","FC","SC","JSC","BC","FSC","AFS","JC","S","A","J"),selected = NULL),
#
#                  radioButtons(inputId="Folder1",label="Select Image Type for Lactation Phase",
#                               choices=c("R(All)"="I_R_All","R(Top100)"="I_R_Top100","Cytoscape(All)"="I_Cytoscape_All","Cytoscape(Top100)"="I_Cytoscape_Top100")),
#
#                  selectInput(inputId = "Method1",label="Select Network Construction Method for Lactation Phase",
#                              choices=c("SparCC"="Sparcc","SPRING"="Spring","SPIEC-EASI"="SPIEC-EASI","CCLasso"="CCLasso")),
#
#                  selectInput(inputId = "LactationPhase",label="Select Lactation Phase",
#                              choices=c("Early Phase"="Early","Mid Phase"="Mid","LatePhase"="Late","Dry Phase"="Dry","All"="All"),selected = NULL),
#
#                  textOutput("result")
#                  ),
#
#     mainPanel(
#               imageOutput(outputId = "network2"),
#               br(),br(),br(),br(),br(),br(),br(),br(),
#               imageOutput(outputId = "network1"),
#               br(),br(),br(),br(),br(),br(),br(),br(),
#               imageOutput(outputId="network3")
#               )
#   )
#
#
# )
#
# #Define server
# server<-function(input,output){
#
#   output$network1 <- renderImage({
#     filename <- normalizePath(file.path('./',paste(input$Folder1,"/",input$Taxa,"_",input$Method1,"_Phase_",input$LactationPhase,'.png', sep='')))
#     outputArgs=list(src = filename)
#   },deleteFile=FALSE)
#
#   output$network2 <- renderImage({
#     filename <- normalizePath(file.path('./',paste(input$Folder2,"/",input$Taxa,"_",input$Method2,"_Breed_",input$CattleBreed,'.png', sep='')))
#     outputArgs=list(src = filename)
#   },deleteFile=FALSE)
#
#   output$network3 <- renderImage({
#     filename <- normalizePath(file.path('./Images3/res.png'))
#     outputArgs=list(src = filename)
#   },deleteFile=TRUE)
#
#
#   mylist <- reactiveVal() # we will store the inputs in a reactive list
#
#   observe({ # create the list
#     mylist(list(
#       Me=input$Me,
#       Pa=input$Pa,
#       Sp=input$Sp))
#   })
#
#   observeEvent(input$script, { # "runScript" is an action button
#     source("TestShiny.R", local = list2env(mylist()))
#   })
#
#
# }
#
# #Run the app
# shinyApp(ui=ui,server=server)
# runExample("01_hello")      # a histogram
# runExample("02_text")       # tables and data frames
# runExample("03_reactivity") # a reactive expression
# runExample("04_mpg")        # global variables
# runExample("05_sliders")    # slider bars
# runExample("06_tabsets")    # tabbed panels
# runExample("07_widgets")    # help text and submit buttons
# runExample("08_html")       # Shiny app built from HTML
# runExample("09_upload")     # file upload wizard
# runExample("10_download")   # file download wizard
# runExample("11_timer")      # an automated timer
#
#source("C:\\Users\\Anushka\\Desktop\\Anushka\\Research\\Methodology\\my_app\\TestShiny.R")
#Print User Input
#install.packages("shiny")
library(shiny)
#install.packages("shinythemes")
library(shinythemes)
#library(shinyjs)
#jscode <- "shinyjs.closeWindow = function() { window.close(); }"
# Loading required packages
library(tidyverse)
library(phyloseq)
library(qiime2R)
library(BiocManager)
library(microbiome)
library(NetCoMi)
library(WGCNA)
#shiny::runGitHub("shiny-phyloseq","joey711")
setwd("C:\\Users\\Anushka\\Desktop\\Anushka\\Research\\Methodology\\my_app")
#install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "MiCoNeV"),
dashboardSidebar(sidebarMenu(
menuItem("Visualize", tabName = "Visualize", icon = icon("circle-nodes")),
menuItem("Associations", tabName = "Associations", icon = icon("th")),
menuItem("Construct", tabName = "Construct", icon = icon("wrench"))
)),
dashboardBody(tabItems(
# First tab content
tabItem(tabName = "Construct",
fluidRow(
box(
h2(strong("Construct Networks")),
br(),
textInput(inputId="Me",label="Network Construction Method"),
textInput(inputId="Pa",label="Select Variable"),
textInput(inputId="Sp",label="Select Sub-Variable"),
#titlePanel("Construct Network"),
#useShinyjs(),
#extendShinyjs(text = jscode, functions = c("closeWindow")),
actionButton("script", "Build Network"),
br(),br()
)
)
),
# Third tab content
tabItem(tabName="Associations",
h2(strong("Edge Data")),
fluidRow(
box(
title = "Taxonomic Level", background = "navy", solidHeader = TRUE,
radioButtons(inputId="Taxa12",label="Select Taxa",
choices=c("Genus"="Genus","Family"="Family","Order"="Order","Class"="Class"))
)
),
fluidRow(
box(
title = "Cattle Breed", background = "orange", solidHeader = TRUE,
radioButtons(inputId="TaxaNum12",label="Select Taxa Number for Cattle Breed",
choices=c("All"="All","Top100"="Top100")),
selectInput(inputId = "Method12",label="Select Network Construction Method for Cattle Breed",
choices=c("SparCC"="Sparcc","SPRING"="Spring")),
selectInput(inputId = "CattleBreed12",label="Select Cattle Breed",
choices=c("FJC","FC","SC","JSC","BC","FSC","AFS","JC","S","A","J"),selected = NULL),
actionButton(inputId = "go12",
label = "Update")
)
),
fluidRow(
box(
tableOutput("contents12"),
width=1000,
style = "overflow-x: scroll"
)
)
),
# Second tab content
tabItem(tabName = "Visualize",
h2(strong("Visualize Networks")),
fluidRow(
box(
title = "Taxonomic Level", solidHeader = TRUE,
radioButtons(inputId="Taxa",label="Select Taxa",
choices=c("Genus"="Genus","Family"="Family","Order"="Order","Class"="Class"))
)
),
fluidRow(
# box(
#   title = "Cattle Breed", background = "maroon", solidHeader = TRUE,
#   radioButtons(inputId="Folder2",label="Select Image Type for Cattle Breed",
#                choices=c("R(All)"="I_R_All","R(Top100)"="I_R_Top100","Cytoscape(All)"="I_Cytoscape_All","Cytoscape(Top100)"="I_Cytoscape_Top100")),
#
#   selectInput(inputId = "Method2",label="Select Network Construction Method for Cattle Breed",
#               choices=c("SparCC"="Sparcc","SPRING"="Spring")),
#
#   selectInput(inputId = "CattleBreed",label="Select Cattle Breed",
#               choices=c("FJC","FC","SC","JSC","BC","FSC","AFS","JC","S","A","J"),selected = NULL),
#
#   actionButton(inputId = "go2",
#                label = "Update")
#
#
# ),
#
# box(
#   title = "Lactation Phase", background = "blue", solidHeader = TRUE,
#   radioButtons(inputId="Folder1",label="Select Image Type for Lactation Phase",
#                choices=c("R(All)"="I_R_All","R(Top100)"="I_R_Top100","Cytoscape(All)"="I_Cytoscape_All","Cytoscape(Top100)"="I_Cytoscape_Top100")),
#
#   selectInput(inputId = "Method1",label="Select Network Construction Method for Lactation Phase",
#               choices=c("SparCC"="Sparcc","SPRING"="Spring","SPIEC-EASI"="SPIEC-EASI","CCLasso"="CCLasso")),
#
#   selectInput(inputId = "LactationPhase",label="Select Lactation Phase",
#               choices=c("Early Phase"="Early","Mid Phase"="Mid","LatePhase"="Late","Dry Phase"="Dry","All"="All"),selected = NULL),
#
#   #textOutput("result")
#
#   actionButton(inputId = "go1",
#                label = "Update")
tabBox(
title="Select Variable",
id="tabset1",
width="100px",
side="right",
tabPanel(
"Breed",
#title = "Cattle Breed", background = "maroon", solidHeader = TRUE,
radioButtons(inputId="Folder2",label="Select Image Type for Cattle Breed",
choices=c("R(All)"="I_R_All","R(Top100)"="I_R_Top100","Cytoscape(All)"="I_Cytoscape_All","Cytoscape(Top100)"="I_Cytoscape_Top100")),
selectInput(inputId = "Method2",label="Select Network Construction Method for Cattle Breed",
choices=c("SparCC"="Sparcc","SPRING"="Spring")),
selectInput(inputId = "CattleBreed",label="Select Cattle Breed",
choices=c("FJC","FC","SC","JSC","BC","FSC","AFS","JC","S","A","J"),selected = NULL),
# actionButton(inputId = "go2",
#              label = "Update")
),
tabPanel(
"Phase",
radioButtons(inputId="Folder1",label="Select Image Type for Lactation Phase",
choices=c("R(All)"="I_R_All","R(Top100)"="I_R_Top100","Cytoscape(All)"="I_Cytoscape_All","Cytoscape(Top100)"="I_Cytoscape_Top100")),
selectInput(inputId = "Method1",label="Select Network Construction Method for Lactation Phase",
choices=c("SparCC"="Sparcc","SPRING"="Spring","SPIEC-EASI"="SPIEC-EASI","CCLasso"="CCLasso")),
selectInput(inputId = "LactationPhase",label="Select Lactation Phase",
choices=c("Early Phase"="Early","Mid Phase"="Mid","LatePhase"="Late","Dry Phase"="Dry","All"="All"),selected = NULL),
#textOutput("result")
# actionButton(inputId = "go1",
#              label = "Update")
)
)
),
fluidRow(
box(
width=12,
imageOutput(outputId = "network1"),
br(),br(),br(),br(),
style = "overflow-x: scroll"
)
),
# fluidRow(
#
#
#   imageOutput(outputId = "network2"),
#   br(),br(),br(),br(),br(),br()
#
# ),
)
)),
tags$head(tags$style(HTML('
/* body */
.content-wrapper, .right-side {
background-color: #ffffff;
}
')))
)
server <- function(input, output) {
# data1 <- eventReactive(input$go1, {
#   filename <- normalizePath(file.path('./',paste(input$Folder1,"/",input$Taxa,"_",input$Method1,"_Phase_",input$LactationPhase,'.png', sep='')))
#   outputArgs=list(src = filename)
# })
#
# data2 <- eventReactive(input$go2, {
#   filename <- normalizePath(file.path('./',paste(input$Folder2,"/",input$Taxa,"_",input$Method2,"_Breed_",input$CattleBreed,'.png', sep='')))
#   outputArgs=list(src = filename)
# })
data12 <- eventReactive(input$go12, {
filename <- normalizePath(file.path('./Associations',paste(input$Taxa12,"_",input$Method12,"_Breed_",input$CattleBreed12,"_",input$TaxaNum12,'.csv', sep='')))
#outputArgs=list(src = filename)
df <- read.csv(filename,sep=",")
})
output$contents12<-renderTable({
data12()
})
output$network1 <- renderImage({
if(input$tabset1 == "Phase") {
filename <- normalizePath(file.path('./',paste(input$Folder1,"/",input$Taxa,"_",input$Method1,"_",input$tabset1,"_",input$LactationPhase,'.png', sep='')))
}
else {
filename <- normalizePath(file.path('./',paste(input$Folder2,"/",input$Taxa,"_",input$Method2,"_",input$tabset1,"_",input$CattleBreed,'.png', sep='')))
}
outputArgs=list(src = filename)
},deleteFile=FALSE)
# output$network2 <- renderImage({
#   filename <- normalizePath(file.path('./',paste(input$Folder2,"/",input$Taxa,"_",input$Method2,"_",input$tabset1,"_",input$CattleBreed,'.png', sep='')))
#   outputArgs=list(src = filename)
# },deleteFile=FALSE)
output$network3 <- renderImage({
filename <- normalizePath(file.path('./Images3/res.png'))
outputArgs=list(src = filename)
},deleteFile=TRUE)
mylist <- reactiveVal() # we will store the inputs in a reactive list
observe({ # create the list
mylist(list(
Me=input$Me,
Pa=input$Pa,
Sp=input$Sp))
})
observeEvent(input$script, { # "runScript" is an action button
source("TestShiny.R", local = list2env(mylist()))
})
}
#Run the app
shinyApp(ui=ui,server=server)
