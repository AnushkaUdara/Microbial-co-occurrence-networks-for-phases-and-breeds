print(x)
x=x+1
}
#if condition
while (TRUE){
num=readline()
num=as.integer(num)
}
#Singular Value Decomposition(SVD)
library(mass)
#Singular Value Decomposition(SVD)
library(MASS)
svd
n=100
y=t(mvrnorm(n,c(0,0),matrix(c(1,0.95,0.95,1),2,2)))
y
svd(y)
#Lecture 03
matrix(data = c(4,-5,-1,7,-2,3,-1,4,-3,8,2,6), nrow = 4, ncol = 3, byrow = T,
dimnames = NULL)
#Lecture 03
A=matrix(data = c(4,-5,-1,7,-2,3,-1,4,-3,8,2,6), nrow = 4, ncol = 3, byrow = T,
dimnames = NULL)
svd(A)
z=svd(A)
A
z$d**2
prop.table(z$d**2)
z$u[,1]%*%diag(z$d[1])%*%z$v[,1]
z$u%*%diag(z$d[1])%*%t(z$v)
z$u%*%diag(z$d)%*%t(z$v)
as.matrix(z$u[,1:2])%*%diag(z$d[1:2])%*%t(as.matrix(z$v[,1:2])
as.matrix(z$u[,1:2])%*%diag(z$d[1:2])%*%t(as.matrix(z$v[,1:2]))
as.matrix(z$u[,1:2])%*%diag(z$d[1:2])%*%t(as.matrix(z$v[,1:2]))
A=matrix(data = c(4,-5,-1,7,-2,3,-1,4,-3,8,2,6), nrow = 4, ncol = 3, byrow = T,
dimnames = NULL)
A
D=matrix(c(2.5,0.5,2.2,1.9,3.1,2.3,2.0,1.0,1.5,1.1,2.4,0.7,2.9,2.2,3.0,2.7,1.6,1.1,1.6,0.9),nrow = 10,ncol = 2,byrow = F)
D
DT=t(D)
DT
plot(DT[1,],DT[2,])
D=matrix(c(2.5,0.5,2.2,1.9,3.1,2.3,2.0,1.0,1.5,1.1,2.4,0.7,2.9,2.2,3.0,2.7,1.6,1.1,1.6,0.9),nrow = 10,ncol = 2,byrow = F)
D
DT=t(D)
DT
plot(DT[1,],DT[2,])
mean(DT[1,])
mean(DT[2,])
plot(DT[1,],DT[2,])
par(mar=c(1,1,1,1))
plot(DT[1,],DT[2,])
DT[2,]=DT[2,]-mean(DT[2,])
DT
plot(DT[1,],DT[2,])
par(mar=c(5,4,4,2)+0.1)
plot(DT[1,],DT[2,])
#Principal Component Analysis
D=matrix(c(2.5,0.5,2.2,1.9,3.1,2.3,2.0,1.0,1.5,1.1,2.4,0.7,2.9,2.2,3.0,2.7,1.6,1.1,1.6,0.9),nrow = 10,ncol = 2,byrow = F)
D
DT=t(D)
DT
par(mar=c(5,4,4,2)+0.1)
plot(DT[1,],DT[2,])
mean(DT[1,])
mean(DT[2,])
DT[1,]=DT[1,]-mean(DT[1,])
DT[2,]=DT[2,]-mean(DT[2,])
DT
plot(DT[1,],DT[2,])
#covariance
cov.matrix=var(t(DT))
cov.matrix
#Eigenvalues and eigen vectors
eigen(cov.matrix)
#Identify the eigenvector associated with eigenvalue 0.0490834
w=eigen(cov.matrix)$vectors
WT=t(w)
WT
#PCA
DPCA=WT%*%DT
DPCA
#Using prcomp
?prcomp
?princomp
D
pca=prcomp(D,center = T)
pca$x
plot(pca$x[,1],pca$x[,2])
par(mar=c(5,4,4,2)+0.1)
plot(pca$x[,1],pca$x[,2])
summary(pca)
screeplot(pca)
par(mar=c(5,4,4,2)+0.1)
screeplot(pca)
shiny::runApp('C:/Users/Anushka/Desktop/Anushka/Research/Methodology/my_app')
?imageOutput
?imageOutput
runApp('C:/Users/Anushka/Desktop/Anushka/Research/Methodology/my_app')
runApp('C:/Users/Anushka/Desktop/Anushka/Research/Methodology/my_app')
#Print User Input
#install.packages("shiny")
library(shiny)
#install.packages("shinythemes")
library(shinythemes)
#Define UI
ui<-fluidPage(
titlePanel(h1(strong("Microbial Co-Occurrence Networks"))),
sidebarLayout(
position = "left",
sidebarPanel(h2(strong("Upload Data")),
br(),
fileInput(inputId="TaxaFile",label="Browse Taxa File",accept=".qza"),
fileInput(inputId="OTUFile",label="Browse OTU File",accept=".qza"),
fileInput(inputId="MetaFile",label="Browse Meta Data File",accept=".txt"),
selectInput(inputId = "Method",label="Select Network COnstruction Method",
choices=c("SparCC"="Sparcc","SPRING"="Spring")),
selectInput(inputId = "CattleParameter",label="Select Cattle Parameter",
choices=c("Cattle Breed"="Breed","Lactation Phase"="Phase")),
selectInput(inputId = "LactationPhase",label="Select Lactation Phase",
choices=c("Early Phase"="EarlyPhase","Mid Phase"="MidPhase","Late Phase"="LatePhase","Dry Phase"="DryPhase")),
textOutput("result")
),
mainPanel(#h3(strong("View Network",align="center",style="color:blue")),
#strong("Let's see how to make these networks"),
textOutput("selected_var"),
br(),
#img(src=Method+"_"+CattleParameter+"_"+LactationPhase+".png")
)
)
BiocManager::install(c("biocLite"))
update.packages("Bioconductor")
update.packages("Bioconductor")
BiocManager::install(c("biocLite"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.16")
install.packages(‘installr’)
install.packages("installr")
library(installr)
updateR()
# devtools::install_github("stefpeschel/NetCoMi",
#                          dependencies = c("Depends", "Imports", "LinkingTo"),
#                          repos = c("https://cloud.r-project.org/",
#                                    BiocManager::repositories()))
# devtools::install_github("GraceYoon/SPRING",force = T)
# devtools::install_github("GraceYoon/SPRING")
# 1. Australian Friesian Sahiwal (AFS)
# 2. Ayrshire (AYS)
# 3. Friesian (FR)
# 4. Friesian-cross (FRC)
# 5. Friesian-Jersey_Cross (FRJRC)
# 6. Friesian-Sahiwal-Cross (FRSHC)
# 7. Jersey (JR)
# 8. Jersey-cross (JRC)
# 9. Jersey-Sahiwal-cross (JRSHC)
# 10. Local-Crossbreds: Batu-Cross (BC)
# 11. Sahiwal (SH)
# 12. Sahiwal-cross (SHC)
#
# Categorize as below
# 1. Jersey (JR) and Jersey Cross (JRC)
# - Jersey-Sahiwal-Cross (JRSHC)
# 2. Friesian (FR) and Friesian-cross (FRC)
# - Friesian-Sahiwal-Cross (FRSHC)
# - Friesian-Jersey_Cross (FRJRC
#                          - Australian Friesian Sahiwal (AFS)
#                          3. Ayrshire (AYS)
#                          4. Sahiwal (SH) and Sahiwal-Cross (SHC)
#                          5. Local-crossbreds: Batu-Cross (BC)
# Loading required packages
library(tidyverse)
library(phyloseq)
library(qiime2R)
library(BiocManager)
library(microbiome)
library(NetCoMi)
library(WGCNA)
# Setting the working directory
setwd("C:/Users/Anushka/Desktop/Anushka/Research/Methodology")
#Phyloseq2*****************************************************************************************************************
#Adding .qza files to phyloseq object
physeq=qza_to_phyloseq(
features = "datafiles/table.qza",
taxonomy="datafiles/taxonomy.qza",
)
#Reading the meta data
metx=read.delim("datafiles/metadata_table.txt",sep=",",header=T,row.names=sample_names(physeq))
#head(metx)
#Meta data as sample data
metx=metx[,-1]
metx=sample_data(metx)
#metx
#Merging the sample
complete_physeq=merge_phyloseq(physeq,metx)
#complete_physeq
xa=sample_data(complete_physeq)
#**************************************************************************************************************************
# # filtering the taxa based on prevalance
# phyla2Filter = c("Synergistetes", "OP8", "TM6",
#                  "SR1","GN02","Fibrobacteres",
#                  "Nitrospirae","WPS-2","Planctomycetes")
# # Filter entries with unidentified Phylum.
# complete_physeq = subset_taxa(complete_physeq, !Phylum %in% phyla2Filter)
# #complete_physeq
#Visualization
# sample_data(complete_physeq)
# otu_table(complete_physeq)
# tax_table(complete_physeq)
#aggregating taxa in the Genus level
complete_agg <- tax_glom(complete_physeq, 'Genus')
#complete_agg
tax_table(complete_agg)
complete_agg <- aggregate_taxa(complete_agg, 'Genus')
complete_agg
# keep only taxa that were ....................................................
minTotRelAbun <- 5e-5
sums <- taxa_sums(complete_agg)
#sums
keepTaxa <- taxa_names(complete_agg)[which((sums / sum(sums)) > minTotRelAbun)]
#keepTaxa
filt_complete_agg <- prune_taxa(keepTaxa, complete_agg)
filt_complete_agg
#
# # select data of Different Lactation Phases.
# Early_physeq <- subset_samples(filt_complete_agg, LactationPhase =="Early")
# Late_physeq <- subset_samples(filt_complete_agg, LactationPhase =="Late")
# Mid_physeq <- subset_samples(filt_complete_agg, LactationPhase =="Mid")
# Dry_physeq <- subset_samples(filt_complete_agg, LactationPhase =="Dry")
#
# # select data of different Cattle Breeds
# FJC_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Friesian-Jersey_cross")
# FC_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Friesian_cross")
# SC_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Sahiwal_cross")
# JSC_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Jersey-Sahiwal_cross")
# BC_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Local_crossbreds(Batu_cross)")
# FSC_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Friesian-Sahiwal_cross")
# AFS_physeq <- subset_samples(filt_complete_agg, CattleBreed =="AFS")
# JC_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Jersey_cross")
# S_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Sahiwal")
# A_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Ayrshire")
# J_physeq <- subset_samples(filt_complete_agg, CattleBreed =="Jersey")
#Select Updated Cattle Breeds
JRJRC_physeq=subset_samples(filt_complete_agg, CattleBreed =="Jersey" | CattleBreed=="Jersey_cross" | CattleBreed=="Jersey-Sahiwal_cross")
FRFRC_physeq=subset_samples(filt_complete_agg, CattleBreed =="Friesian_cross" | CattleBreed=="Friesian-Sahiwal_cross" | CattleBreed=="Friesian-Jersey_cross" | CattleBreed=="AFS" | CattleBreed=="Friesian")
Asian_physeq=subset_samples(filt_complete_agg, CattleBreed =="Sahiwal" | CattleBreed=="Sahiwal_cross" | CattleBreed =="Local_crossbreds(Batu_cross)")
# # Saving the phyloseq objects for lactation phases
# saveRDS(complete_physeq, "Phase/Complete data.rds")
# saveRDS(complete_agg, "Phase/Aggregated data.rds")
# saveRDS(filt_complete_agg, "Phase/Filtered Aggregated data.rds")
# saveRDS(Early_physeq, "Phase/Early Phase.rds")
# saveRDS(Late_physeq, "Phase/Late Phase.rds")
# saveRDS(Mid_physeq, "Phase/Mid Phase.rds")
# saveRDS(Dry_physeq, "Phase/Dry Phase.rds")
#
# # Saving the phyloseq objects for cattle breeds
# saveRDS(FJC_physeq, "Breed/FJC Breed.rds")
# saveRDS(FC_physeq, "Breed/FC Breed.rds")
# saveRDS(SC_physeq, "Breed/SC Breed.rds")
# saveRDS(JSC_physeq, "Breed/JSC Breed.rds")
# saveRDS(BC_physeq, "Breed/BC Breed.rds")
# saveRDS(FSC_physeq, "Breed/FSC Breed.rds")
# saveRDS(AFS_physeq, "Breed/AFS Breed.rds")
# saveRDS(JC_physeq, "Breed/JC Breed.rds")
# saveRDS(S_physeq, "Breed/S Breed.rds")
# saveRDS(A_physeq, "Breed/A Breed.rds")
# saveRDS(J_physeq, "Breed/J Breed.rds")
# Saving the phyloseq objects for updated cattle  breeds
saveRDS(JRJRC_physeq, "Breed/JRJRC.rds")
saveRDS(FRFRC_physeq, "Breed/FRFRC.rds")
saveRDS(Asian_physeq, "Breed/Asian.rds")
# saveRDS(LCBC_physeq, "Breed/LCBC.rds")
comp_tax_csv=read.csv("Faprotax/tax/comp_tax.csv",header = T)
agg_tax_csv=read.csv("Faprotax/tax/agg_tax.csv",header = T)
#Sparcc#######################################################################################################
#JRJRC********************************************************************************************************
#30 Samples
JRJRC_data <- readRDS("Breed/JRJRC.rds")
top_JRJRC <- prune_taxa(names(sort(taxa_sums(JRJRC_data),TRUE)[1:50]), JRJRC_data)
#plot_heatmap(top_JRJRC)
JRJRC_data
#SparCC
net_single_JRJRC <- netConstruct(JRJRC_data,
verbose = 3,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 100),
# filtTax = "none",
# filtTaxPar = "totalReads",
filtSamp = "totalReads",
filtSampPar = list(totalReads = 1000),
zeroMethod = "none", normMethod = "none",
measure = "sparcc",
sparsMethod = "threshold", thresh = 0.4,
dissFunc = "signed",
seed = 123456)
saveRDS(net_single_JRJRC, "Breed/JRJRC Breed/JRJRC_Sparcc network.rds")
props_single_JRJRC <- netAnalyze(net_single_JRJRC,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
hubQuant = 0.95)
saveRDS(props_single_JRJRC, "Breed/JRJRC Breed/JRJRC_Sparcc analysis.rds")
#?summary.microNetProps
net.summary <- summary(props_single_JRJRC)
net.summary
p_JRJRC <- plot(props_single_JRJRC,
shortenLabels = "none",
# labelLength = 16,
# charToRm = "g__",
labelScale = FALSE,
rmSingles = "all",
nodeSize = "eigenvector",
nodeColor = "cluster",
hubBorderCol = "blue",
cexNodes = 1,
cexLabels = 0.5,
edgeWidth = 1,
highlightHubs = TRUE,
cexHubs = 1.5,
# cexHubLabels = 2,
title1 = "JRJRC Breed Network on Genus level with SparCC Method.",
showTitle = TRUE,
cexTitle = 1.5)
saveRDS(p_JRJRC, "Breed/JRJRC Breed/JRJRC_Sparcc plot.rds")
from <- p_JRJRC$labels$labels1[p_JRJRC$q1$Edgelist$from]
to <- p_JRJRC$labels$labels1[p_JRJRC$q1$Edgelist$to]
direction <- vector(mode = "integer")
for (x in 1:length(from)){
if (net_single_JRJRC$assoMat1[from[x],to[x]] < 0){
direction[x] <- -1
}
else if (net_single_JRJRC$assoMat1[from[x],to[x]] > 0){
direction[x] <- 1
}
}
edges <- data.frame(row.names = c(1:length(p_JRJRC$q1$Edgelist$from)))
edges$from <- p_JRJRC$q1$Edgelist$from
edges$to <- p_JRJRC$q1$Edgelist$to
edges$weight <- p_JRJRC$q1$Edgelist$weight
edges$association <- direction
write.csv(edges, file = "Breed/JRJRC Breed/JRJRC edge data.csv", row.names = FALSE)
hubs <- props_single_JRJRC$hubs$hubs1
write(hubs, "Breed/JRJRC Breed/JRJRC Breed Hubs.txt")
node.lables <- p_JRJRC$labels$labels1
clust <- props_single_JRJRC$clustering$clust1[node.lables]
node.hubs <- integer(length((node.lables)))
node.hubs[match(hubs,node.lables)] <- 1
nodes <- data.frame(row.names = 1:length(node.lables))
nodes$index <- 1:length(node.lables)
nodes$lable <- node.lables
nodes$cluster <- clust
nodes$hubs <- node.hubs
degrees <- props_single_JRJRC$centralities$degree1[nodes$lable]
evs=props_single_JRJRC$centralities$eigenv1[nodes$lable]
betweennesses=props_single_JRJRC$centralities$between1[nodes$lable]
closenesses=props_single_JRJRC$centralities$close1[nodes$lable]
nodes$degree <- degrees
nodes$ev=evs
nodes$between=betweennesses
nodes$close=closenesses
write.csv(nodes, file = "Breed/JRJRC Breed/JRJRC node data.csv", row.names = FALSE)
hubdata <- subset(nodes, hubs==1, select = -hubs)
write.csv(hubdata, file = "Breed/JRJRC Breed/JRJRC hub data.csv", row.names = FALSE)
#For Associations---------------------------------------------------------------------------------------------
Genus_Sparcc_Breed_JRJRC_Top100=data.frame(Node1=net_single_JRJRC[["edgelist1"]][["v1"]],
Node2=net_single_JRJRC[["edgelist1"]][["v2"]],
Association=net_single_JRJRC[["edgelist1"]][["asso"]],
Dissimilarity=net_single_JRJRC[["edgelist1"]][["diss"]],
Adjecency=net_single_JRJRC[["edgelist1"]][["adja"]]
)
Genus_Sparcc_Breed_JRJRC_Top100=Genus_Sparcc_Breed_JRJRC_Top100[order(Genus_Sparcc_Breed_JRJRC_Top100$Association,
decreasing = T),]
write.csv(Genus_Sparcc_Breed_JRJRC_Top100,"Associations/Genus_Sparcc_Breed_JRJRC_Top100.csv",row.names = FALSE)
#Functions----------------------------------------------------------------------------------------------------
funcFile=read.csv("Faprotax/tax/1670601055.txt.faprotax.report.clean.otu_func.csv",header = F)
clustfile=read.csv("Breed/JRJRC Breed/JRJRC node data.csv")
clustfile=data.frame(clustfile)
clustfile=clustfile[order(clustfile$cluster,decreasing = F),]
for(i in clustfile$cluster){
p=(clustfile$lable[clustfile$cluster==i])
path=normalizePath(file.path('./New folder/JRJRCCluster',paste("JRJRC_Cluster",i,'.csv', sep='')))
write.csv(p,path)
}
#
# tax=read.csv("New folder/Cluster/JRJRC_Cluster1.csv",header=T)
# tax[2]
#
#
# a=list()
#
# for(i in 1:ncol(tax)) {
#   if(i==2){
#     a[[i]] <- tax[ , i]
#   }
# }
#
# names(a)=colnames(tax)
# print(a)
comp_tax_csv=data.frame(otuid=comp_tax_csv$otuid,genus=comp_tax_csv$Genus)
comp_tax_csv
# for(i in a$x){
#   print(subset(comp_tax_csv, comp_tax_csv$genus==i))
#   path=normalizePath(file.path('./New folder/Otu',paste("JRJRC_otuid_",i,'.csv', sep='')))
#   write.csv(subset(comp_tax_csv, comp_tax_csv$genus==i),path)
# }
#
#
#
#
#
# otu=read.csv("New folder/Otu/JRJRC_otuid_Papillibacter.csv",header=T)
# otu[2]
#
# a=list()
#
# for(i in 1:ncol(otu)) {
#   if(i==2){
#     a[[i]] <- otu[ , i]
#   }
# }
#
# print(a)
#
# func_df=data.frame(funcFile)
# func_df[1]
#
#
# for(i in a[[2]]){
#   print(subset(func_df, func_df[1]==i))
#   # path=normalizePath(file.path('./New folder',paste("JRJRC_function_",i,'.csv', sep='')))
#   # write.csv(subset(func_df, func_df[1]==i),path)
# }
#
#
#
#
#
#
#
#
getwd()
fileList=list.files(path="New folder\\JRJRCCluster",pattern = ".csv")
fileList
for(i in fileList){
cat(i,"*****************************************************************")
path=normalizePath(file.path('./New folder/JRJRCCluster',paste(i, sep='')))
file=(read.csv(path))
print(file$x)
for(j in file$x){
#print(subset(comp_tax_csv, comp_tax_csv$genus==j))
x=subset(comp_tax_csv, comp_tax_csv$genus==j)
print(x)
path=normalizePath(file.path('./New folder/JRJRCOtu',paste(i,".txt", sep='')))
write.table(subset(comp_tax_csv, comp_tax_csv$genus==j),path,append=TRUE,col.names = F)
}
}
fileList=list.files(path="New folder\\JRJRCOtu",pattern = ".txt")
fileList
func_df=data.frame(funcFile)
func_df[1]
# for(i in fileList){
#   cat(i,"*****************************************************************")
#   path=normalizePath(file.path('./New folder/Otu',paste(i, sep='')))
#   file=(read.table(path))
#   print(file[2])
# }
func_df=data.frame(funcFile)
fileList=list.files(path="New folder\\JRJRCOtu",pattern = ".txt")
fileList
for(file in fileList){
cat(file,"*******************************************************************")
path=normalizePath(file.path('./New folder/JRJRCOtu',paste(file, sep='')))
tab=read.table(path,header=F)
tab=data.frame(otuid=tab[2],genus=tab[3])
for(i in tab[1]$V2){
print(subset(func_df, func_df[1]==i))
x=subset(func_df, func_df[1]==i)
print(x)
path=normalizePath(file.path('./New folder/JRJRCOtu/Res',paste(file,"_results.txt", sep='')))
write.table(subset(func_df, func_df[1]==i),path,append=TRUE,col.names = F)
}
}
for(i in 1:7){
path1=normalizePath(file.path('./New folder/JRJRCOtu/Res',paste("JRJRC_Cluster",i,".csv.txt_results.txt", sep='')))
path2=normalizePath(file.path('./New folder/JRJRCOtu',paste("JRJRC_Cluster",i,".csv.txt", sep='')))
resulrDataFile=read.table(path1,col.names = c("1","2","3"))
resultDataFrame=data.frame(resulrDataFile)
otuGeneraFile=read.table(path2,col.names = c("1","2","3"))
otuGeneraDataFrame=data.frame(otuGeneraFile)
path3=normalizePath(file.path('./New folder/FinalRes',paste("JRJRC_Cluster",i,".csv.txt_Finalresults.txt", sep='')))
newDF=merge(resultDataFrame,otuGeneraDataFrame,by="X2")
newDF=unique(newDF)
write.table(newDF,path3)
}
# resulrDataFile=read.table("New folder/Otu/Res/JRJRC_Cluster1.csv.txt_results.txt",col.names = c("1","2","3"))
# resultDataFrame=data.frame(resulrDataFile)
#
# otuGeneraFile=read.table("New folder/Otu/JRJRC_Cluster1.csv.txt",col.names = c("1","2","3"))
# otuGeneraDataFrame=data.frame(otuGeneraFile)
#
# resultDataFrame$X2
# otuGeneraDataFrame$X2
#
# newDF=merge(resultDataFrame,otuGeneraDataFrame,by="X2")
# newDF=unique(newDF)
# Loading required packages
library(tidyverse)
library(phyloseq)
library(qiime2R)
library(BiocManager)
library(microbiome)
library(NetCoMi)
library(WGCNA)
