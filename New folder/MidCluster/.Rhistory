yields=c(3.56,5.0,4.88,4.93,3.92,4.25,5.12,5.13,4.79,4.45,5.35,4.81,3.48,4.45,4.72)
res=t.test(x=yields,
alternative = c("greater"),
mu = 4.35, var.equal = T,
conf.level = 0.95)
res
#EX02
library(TeachingDemos)
#EX02
library(TeachingDemos)
res=z.test(x=0.15, mu = 0.1, stdev=0.17, alternative = c("two.sided"),
n=110, conf.level = 0.01)
res
#EX03
Urea=c(69,66,71,69,68,71,74,69,73,70)
AS=c(68,69,66,64,67,69,65,71,68,70,65,63,66,68,66,72,69,67,66,61)
res=t.test(x=Urea, y = AS,
alternative = c("two.sided"),
paired = FALSE, var.equal = T,
conf.level = 0.95)
res
#EX04
thrust=c(999.1,1003.2,1002.1,999.2,989.7,1006.7,1012.3,996.4,1000.2,995.3,1008.7,993.4,998.1,997.9,1003.1,1002.6,1001.8,996.5)
#Scientist A
resA=z.test(x=thrust, mu = 997, stdev=6, alternative = c("two.sided"),
conf.level = 0.95)
resA
#Scientist B
resB=z.test(x=thrust, mu = 999, stdev=6, alternative = c("two.sided"),
conf.level = 0.95)
resB
#Scientist C
resC=z.test(x=thrust, mu = 1001, stdev=6, alternative = c("two.sided"),
conf.level = 0.95)
resC
#Scientist D
resD=z.test(x=thrust, mu = 1003, stdev=6, alternative = c("two.sided"),
conf.level = 0.95)
resD
yield=c(138.0,139.1,113.0,132.5,140.7,109.7,118.9,134.8,109.6,127.3,115.6,130.4,130.2,111.7,105.5)
res=z.test(x=yield,stdev=12,
conf.level = 0.90)
res
res=z.test(x=yield,stdev=12,
conf.level = 0.95)
res
res=z.test(x=yield,stdev=12,
conf.level = 0.99)
res
#EX06
ratings=c(44,50,24,45,39,57,25,90,78,54)
res=z.test(x=ratings, mu = 60, stdev=3.5, alternative = c("less"),
conf.level = 0.95)
res
#EX07
res=z.test(x=75, mu = 60, stdev=30, alternative = c("two.sided"),
n=36, conf.level = 0.99)
res
x=c(4,2,3,4,7,5,7,10,12,1)
y=c(45,20,28,55,62,45,40,80,90,20)
plot(x,y)
plot(x,y,col="red",pch=8)
cor.test(x, y,
alternative = c("two.sided"),
method = c("pearson"),
conf.level = 0.95)
reg=lm(x~y)
summary(reg)
reg=lm(y~x)
summary(reg)
plot(x,y,col="red",pch=8)
abline(reg)
v=c(14.3,15.2,11.3,16.7,9.2,12.5)
mean(v)
sum(v)/length(v)
#Numeric Data Type
x=10.5
#Character Data Type
y="Anushka"
#Boolean Data Types
z=TRUE
#Accessing the vector
v[1]
v[4]
v[-1]
v[-2]
v[2:]
v[2;]
#Data Frames
df=data.frame(Name=c("Amal","Kamal","Sunil","Nimal"),age=c(28,32,24,39))
df
df=data.frame(ExL=c(11.2,14.3,8.8,15.1),gene=c("G1","G7","G11","G12"))
df
mean(df$ExL)
mean(df[,1])
df[1,2]
df[2,1]
#Find the expression level of gene 7
df$ExL[df$gene=="G7"]
#Sequences
1:5
5;1
1:10:0.1
1:10,0.1
1:5+1:5
#Control Structures
#for loops
myDna=sample(c("A","T","G","C"),n=100,replace=T)
#Control Structures
#for loops
myDna=sample(c("A","T","G","C"),size=100,replace=T)
Acount=0
Tcount=0
Gcount=0
Ccount=0
#Control Structures
#for loops
myDna=sample(c("A","T","G","C"),size=100,replace=T)
Acount=0
Tcount=0
Gcount=0
Ccount=0
for(base in myDna){
if(base=="A"){
Acount=Acount+1
}else if(base=="T"){
Tcount=Tcount+1
}else if(base=="G"){
Gcount=Gcount+1
}else if(base=="C"){
Ccount=Ccount+1
}
}
cat("A count:",Acount,"\nTcount:",Tcount,"\nGcount:",Gcount,"\nCcount:",Ccount)
for(i in 1:12){
cat("12 X",i,"=",12*i)
}
for(i in 1:12){
cat("12 X",i,"=",12*i,"\n")
}
print(x)
#while loop
x=1
while(x<10){
print(x)
}
#while loop
x=1
while(x<10){
print(x)
}
x=x+1
#while loop
x=1
while(x<10){
print(x)
x=x+1
}
#if condition
while TRUE{
num=readline()
}
#if condition
while (TRUE){
num=readline()
print(num)
}
#if condition
while (TRUE){
num=readline()
num=as.integer(num)
}
#if condition
while (TRUE){
num=readline()
num=as.integer(num)
}
#if condition
while (TRUE){
num=readline()
num=as.integer(num)
}
#while loop
x=1
while(x<10){
print(x)
x=x+1
}
#if condition
while (TRUE){
num=readline()
num=as.integer(num)
}
#Singular Value Decomposition(SVD)
library(mass)
#Singular Value Decomposition(SVD)
library(MASS)
svd
n=100
y=t(mvrnorm(n,c(0,0),matrix(c(1,0.95,0.95,1),2,2)))
y
svd(y)
#Lecture 03
matrix(data = c(4,-5,-1,7,-2,3,-1,4,-3,8,2,6), nrow = 4, ncol = 3, byrow = T,
dimnames = NULL)
#Lecture 03
A=matrix(data = c(4,-5,-1,7,-2,3,-1,4,-3,8,2,6), nrow = 4, ncol = 3, byrow = T,
dimnames = NULL)
svd(A)
z=svd(A)
A
z$d**2
prop.table(z$d**2)
z$u[,1]%*%diag(z$d[1])%*%z$v[,1]
z$u%*%diag(z$d[1])%*%t(z$v)
z$u%*%diag(z$d)%*%t(z$v)
as.matrix(z$u[,1:2])%*%diag(z$d[1:2])%*%t(as.matrix(z$v[,1:2])
as.matrix(z$u[,1:2])%*%diag(z$d[1:2])%*%t(as.matrix(z$v[,1:2]))
as.matrix(z$u[,1:2])%*%diag(z$d[1:2])%*%t(as.matrix(z$v[,1:2]))
A=matrix(data = c(4,-5,-1,7,-2,3,-1,4,-3,8,2,6), nrow = 4, ncol = 3, byrow = T,
dimnames = NULL)
A
D=matrix(c(2.5,0.5,2.2,1.9,3.1,2.3,2.0,1.0,1.5,1.1,2.4,0.7,2.9,2.2,3.0,2.7,1.6,1.1,1.6,0.9),nrow = 10,ncol = 2,byrow = F)
D
DT=t(D)
DT
plot(DT[1,],DT[2,])
D=matrix(c(2.5,0.5,2.2,1.9,3.1,2.3,2.0,1.0,1.5,1.1,2.4,0.7,2.9,2.2,3.0,2.7,1.6,1.1,1.6,0.9),nrow = 10,ncol = 2,byrow = F)
D
DT=t(D)
DT
plot(DT[1,],DT[2,])
mean(DT[1,])
mean(DT[2,])
plot(DT[1,],DT[2,])
par(mar=c(1,1,1,1))
plot(DT[1,],DT[2,])
DT[2,]=DT[2,]-mean(DT[2,])
DT
plot(DT[1,],DT[2,])
par(mar=c(5,4,4,2)+0.1)
plot(DT[1,],DT[2,])
#Principal Component Analysis
D=matrix(c(2.5,0.5,2.2,1.9,3.1,2.3,2.0,1.0,1.5,1.1,2.4,0.7,2.9,2.2,3.0,2.7,1.6,1.1,1.6,0.9),nrow = 10,ncol = 2,byrow = F)
D
DT=t(D)
DT
par(mar=c(5,4,4,2)+0.1)
plot(DT[1,],DT[2,])
mean(DT[1,])
mean(DT[2,])
DT[1,]=DT[1,]-mean(DT[1,])
DT[2,]=DT[2,]-mean(DT[2,])
DT
plot(DT[1,],DT[2,])
#covariance
cov.matrix=var(t(DT))
cov.matrix
#Eigenvalues and eigen vectors
eigen(cov.matrix)
#Identify the eigenvector associated with eigenvalue 0.0490834
w=eigen(cov.matrix)$vectors
WT=t(w)
WT
#PCA
DPCA=WT%*%DT
DPCA
#Using prcomp
?prcomp
?princomp
D
pca=prcomp(D,center = T)
pca$x
plot(pca$x[,1],pca$x[,2])
par(mar=c(5,4,4,2)+0.1)
plot(pca$x[,1],pca$x[,2])
summary(pca)
screeplot(pca)
par(mar=c(5,4,4,2)+0.1)
screeplot(pca)
shiny::runApp('C:/Users/Anushka/Desktop/Anushka/Research/Methodology/my_app')
?imageOutput
?imageOutput
runApp('C:/Users/Anushka/Desktop/Anushka/Research/Methodology/my_app')
runApp('C:/Users/Anushka/Desktop/Anushka/Research/Methodology/my_app')
#Print User Input
#install.packages("shiny")
library(shiny)
#install.packages("shinythemes")
library(shinythemes)
#Define UI
ui<-fluidPage(
titlePanel(h1(strong("Microbial Co-Occurrence Networks"))),
sidebarLayout(
position = "left",
sidebarPanel(h2(strong("Upload Data")),
br(),
fileInput(inputId="TaxaFile",label="Browse Taxa File",accept=".qza"),
fileInput(inputId="OTUFile",label="Browse OTU File",accept=".qza"),
fileInput(inputId="MetaFile",label="Browse Meta Data File",accept=".txt"),
selectInput(inputId = "Method",label="Select Network COnstruction Method",
choices=c("SparCC"="Sparcc","SPRING"="Spring")),
selectInput(inputId = "CattleParameter",label="Select Cattle Parameter",
choices=c("Cattle Breed"="Breed","Lactation Phase"="Phase")),
selectInput(inputId = "LactationPhase",label="Select Lactation Phase",
choices=c("Early Phase"="EarlyPhase","Mid Phase"="MidPhase","Late Phase"="LatePhase","Dry Phase"="DryPhase")),
textOutput("result")
),
mainPanel(#h3(strong("View Network",align="center",style="color:blue")),
#strong("Let's see how to make these networks"),
textOutput("selected_var"),
br(),
#img(src=Method+"_"+CattleParameter+"_"+LactationPhase+".png")
)
)
setwd("C:\\Users\\Anushka\\Desktop\\Anushka\\Research\\Methodology\\New folder\\EarlyCluster")
getwd()
F_E1=read.csv("Early_Cluster1.csv",header = T)
F_E1
F_E1$x
P_E1=F_E1$x
P_E1
F_E2=read.csv("Early_Cluster2.csv",header = T)
P_E2=F_E2$x
P_E12
P_E2
intersect(P_E1,P_E2)
setwd("C:\\Users\\Anushka\\Desktop\\Anushka\\Research\\Methodology\\New folder\\EarlyCluster")
F_E1=read.csv("Early_Cluster1.csv",header = T)
P_E1=F_E1$x
P_E1
F_E2=read.csv("Early_Cluster2.csv",header = T)
P_E2=F_E2$x
P_E2
F_E3=read.csv("Early_Cluster3.csv",header = T)
P_E3=F_E3$x
P_E3
F_E4=read.csv("Early_Cluster4.csv",header = T)
P_E4=F_E4$x
P_E4
F_E5=read.csv("Early_Cluster5.csv",header = T)
P_E5=F_E5$x
P_E5
F_E6=read.csv("Early_Cluster6.csv",header = T)
P_E6=F_E6$x
P_E6
etwd("C:\\Users\\Anushka\\Desktop\\Anushka\\Research\\Methodology\\New folder\\MidCluster")
F_E1=read.csv("Mid_Cluster1.csv",header = T)
P_E1=F_E1$x
P_E1
F_E2=read.csv("Mid_Cluster2.csv",header = T)
P_E2=F_E2$x
P_E2
F_E3=read.csv("Mid_Cluster3.csv",header = T)
P_E3=F_E3$x
P_E3
F_E4=read.csv("Mid_Cluster4.csv",header = T)
P_E4=F_E4$x
P_E4
F_E5=read.csv("Mid_Cluster5.csv",header = T)
P_E5=F_E5$x
P_E5
setwd("C:\\Users\\Anushka\\Desktop\\Anushka\\Research\\Methodology\\New folder\\MidCluster")
F_E1=read.csv("Mid_Cluster1.csv",header = T)
P_E1=F_E1$x
P_E1
F_E2=read.csv("Mid_Cluster2.csv",header = T)
P_E2=F_E2$x
P_E2
F_E3=read.csv("Mid_Cluster3.csv",header = T)
P_E3=F_E3$x
P_E3
F_E4=read.csv("Mid_Cluster4.csv",header = T)
P_E4=F_E4$x
P_E4
F_E5=read.csv("Mid_Cluster5.csv",header = T)
P_E5=F_E5$x
P_E5
setwd("C:\\Users\\Anushka\\Desktop\\Anushka\\Research\\Methodology\\New folder\\EarlyCluster")
F_E1=read.csv("Early_Cluster1.csv",header = T)
P_E1=F_E1$x
P_E1
F_E2=read.csv("Early_Cluster2.csv",header = T)
P_E2=F_E2$x
P_E2
F_E3=read.csv("Early_Cluster3.csv",header = T)
P_E3=F_E3$x
P_E3
F_E4=read.csv("Early_Cluster4.csv",header = T)
P_E4=F_E4$x
P_E4
F_E5=read.csv("Early_Cluster5.csv",header = T)
P_E5=F_E5$x
P_E5
F_E6=read.csv("Early_Cluster6.csv",header = T)
P_E6=F_E6$x
P_E6
setwd("C:\\Users\\Anushka\\Desktop\\Anushka\\Research\\Methodology\\New folder\\MidCluster")
F_M1=read.csv("Mid_Cluster1.csv",header = T)
P_M1=F_M1$x
P_M1
F_M2=read.csv("Mid_Cluster2.csv",header = T)
P_M2=F_M2$x
P_M2
F_M3=read.csv("Mid_Cluster3.csv",header = T)
P_M3=F_M3$x
P_M3
F_M4=read.csv("Mid_Cluster4.csv",header = T)
P_M4=F_M4$x
P_M4
F_M5=read.csv("Mid_Cluster5.csv",header = T)
P_M5=F_M5$x
P_M5
intersect(P_M1,P_E1)
intersect(P_M2,P_E1)
intersect(P_M1,P_E1)
intersect(P_M2,P_E1)
intersect(P_M3,P_E1)
intersect(P_M4,P_E1)
intersect(P_M5,P_E1)
intersect(P_M1,P_E2)
intersect(P_M2,P_E2)
intersect(P_M3,P_E2)
intersect(P_M4,P_E2)
intersect(P_M5,P_E2)
intersect(P_M1,P_E3)
intersect(P_M2,P_E3)
intersect(P_M3,P_E3)
intersect(P_M4,P_E3)
intersect(P_M5,P_E3)
intersect(P_M6,P_E3)
intersect(P_M1,P_E4)
intersect(P_M2,P_E4)
intersect(P_M3,P_E4)
intersect(P_M4,P_E4)
intersect(P_M5,P_E4)
intersect(P_M1,P_E5)
intersect(P_M2,P_E5)
intersect(P_M3,P_E5)
intersect(P_M4,P_E5)
intersect(P_M5,P_E5)
intersect(P_M1,P_E6)
intersect(P_M2,P_E6)
intersect(P_M3,P_E6)
intersect(P_M4,P_E6)
intersect(P_M5,P_E6)
library("gplots")
# use list as input
x <-list('Early1'=P_E1,'Mid2'=P_M2)
# create Venn diagram with two sets
venn(x)
# use list as input
x <-list('Early1'=P_E1,
'Early2'=P_E2,
'Early3'=P_E3,
'Early4'=P_E4,
'Early5'=P_E5,
'Early6'=P_E6,
'Mid2'=P_M2)
# create Venn diagram with two sets
ggVennDiagram(x)
install.packages("ggVennDiagram")
library(ggVennDiagram)
# use list as input
x <-list('Early1'=P_E1,
'Early2'=P_E2,
'Early3'=P_E3,
'Early4'=P_E4,
'Early5'=P_E5,
'Early6'=P_E6,
'Mid2'=P_M2)
# create Venn diagram with two sets
ggVennDiagram(x)
# create Venn diagram with two sets
ggVennDiagram(x,label = "count")
# create Venn diagram with two sets
ggVennDiagram(x,label = "count",show_intersect=T)
# use list as input
x <-list('Early1'=P_E1,
'Mid2'=P_M2)
# create Venn diagram with two sets
ggVennDiagram(x,label = "count")
# use list as input
x <-list('Early1'=P_E1,
'Mid2'=P_M1)
# create Venn diagram with two sets
ggVennDiagram(x,label = "count")
# use list as input
x <-list('Early1'=P_E1,
'Mid1'=P_M1)
# create Venn diagram with two sets
ggVennDiagram(x,label = "count")
# use list as input
x <-list('Early1'=P_E1,
'Mid2'=P_M2)
# create Venn diagram with two sets
ggVennDiagram(x,label = "count")
# use list as input
x <-list('Early1'=P_E1,
'Mid3'=P_M3)
# create Venn diagram with two sets
ggVennDiagram(x,label = "count")
# use list as input
x <-list('Early1'=P_E1,
'Mid4'=P_M4)
# create Venn diagram with two sets
ggVennDiagram(x,label = "count")
# use list as input
x <-list('Early1'=P_E1,
'Mid5'=P_M5)
# create Venn diagram with two sets
ggVennDiagram(x,label = "count")
