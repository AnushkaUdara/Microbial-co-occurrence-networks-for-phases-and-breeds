z = x + y
install.packages("ggplot2")
install.packages(""TeachingDemos)
install.packages("TeachingDemos")
library(TeachingDemos)
data=c(3.56,5.0,4.88,4.93,3.92,4.25,5.12,5.13,4.79,4.45,5.35,4.81,3.48,4.4)
data=c(3.56,5.0,4.88,4.93,3.92,4.25,5.12,5.13,4.79,4.45,5.35,4.81,3.48,4.45,4.72)
t.test(x=data, mu=4.35, alternative=c("greater"),conf.level=0.95,var.equal=TRUE);
getwd
getwd()
data1=read.table("ex1.txt",header=F)
print(data1)
t.test(x=data1, mu=4.35, alternative=c("greater"),conf.level=0.95,var.equal=TRUE);
install.packages("TeachingDemos")
library(TeachingDemos)
getwd()
install.packages("TeachingDemos")
data1=read.table("ex1.txt",header=F)
t.test(x=data1, mu=4.35, alternative=c("greater"),conf.level=0.95,var.equal=TRUE);
z.test(x=0.1,	mu=0.15, stdev=0.17, alternative=c("two.sided"),	conf.level=0.90,	n=110)
z.test(x=0.15,	mu=0.1, stdev=0.17, alternative=c("two.sided"),	conf.level=0.90,	n=110)
dataU=c(69,66,71,69,68,71,74,69,73,70)
dataAS=c(68,69,66,64,67,69,65,71,68,70,65,63,66,68,66,72,69,67,66,61)
t.test(x=dataU, y=dataAS, alternative=c("greater"), conf.level=0.95, paired =	FALSE, var.equal=TRUE);
dataR=c(999.1,1003.2,1002.1,999.2,989.7,1006.7,1012.3,996.4,1000.2,995.3,1008.7,993.4,998.1,997.9,1003.1,1002.6,1001.8,996.5)
z.test(x=dataR,	mu=997, stdev=6, alternative=c("two.sided"),	conf.level=0.95,n=18)
dataR=c(999.1,1003.2,1002.1,999.2,989.7,1006.7,1012.3,996.4,1000.2,995.3,1008.7,993.4,998.1,997.9,1003.1,1002.6,1001.8,996.5)
z.test(x=dataR,	mu=997, stdev=6, alternative=c("two.sided"),	conf.level=0.95,n=18)
z.test(x=dataR,	mu=999, stdev=6, alternative=c("two.sided"),	conf.level=0.95,n=18)
z.test(x=dataR,	mu=1001, stdev=6, alternative=c("two.sided"),	conf.level=0.95,n=18)
z.test(x=dataR,	mu=1003, stdev=6, alternative=c("two.sided"),	conf.level=0.95,n=18)
#Ouestion 03
dataU=c(69,66,71,69,68,71,74,69,73,70)
dataAS=c(68,69,66,64,67,69,65,71,68,70,65,63,66,68,66,72,69,67,66,61)
t.test(x=dataU, y=dataAS, alternative=c("two.sided"), conf.level=0.95, paired =	FALSE, var.equal=TRUE);
cornY=c(138.0,109.6,139.1,127.3,113.0,115.6,132.5,130.4,140.7,130.2,109.7,111.7,118.9,105.5,134.8)
z.test(x=cornY,stdev=12,conf.level=0.90,	n=15)
cornY=c(138.0,109.6,139.1,127.3,113.0,115.6,132.5,130.4,140.7,130.2,109.7,111.7,118.9,105.5,134.8)
z.test(x=cornY,stdev=12,conf.level=0.90,	n=15)
z.test(x=cornY,stdev=12,conf.level=0.95,	n=15)
z.test(x=cornY,stdev=12,conf.level=0.99,	n=15)
#Question 06
uniD=c(44,50,24,45,39,57,25,90,78,54)
z.test(x=uniD,	mu=60, stdev=3.5, alternative=c("greater"),	conf.level=0.95,	n=10)
#Question 07
z.test(x=75,	mu=60, stdev=30, alternative=("two.sided"),	conf.level=0.90,	n=36)
View(data1)
bacA=c(200,312,165,223,190,327,250,180,206,197)
bacB=c(234,342,155,216,220,313,290,202,248,230)
t.test(x=bacA, y=bacB, alternative=("two.sided"), conf.level=0.95, paired =	FALSE, var.equal=TRUE);
#Question 09
z.test(x=61.8,	mu=60, stdev=6, alternative=c("greater"),	conf.level=0.95,	n=36)
#Question 04
dataR=c(999.1,1003.2,1002.1,999.2,989.7,1006.7,1012.3,996.4,1000.2,995.3,1008.7,993.4,998.1,997.9,1003.1,1002.6,1001.8,996.5)
z.test(x=dataR,	mu=997, stdev=6, alternative=c("two.sided"),	conf.level=0.95,n=18)
z.test(x=dataR,	mu=999, stdev=6, alternative=c("two.sided"),	conf.level=0.95,n=18)
z.test(x=dataR,	mu=1001, stdev=6, alternative=c("two.sided"),	conf.level=0.95,n=18)
z.test(x=dataR,	mu=1003, stdev=6, alternative=c("two.sided"),	conf.level=0.95,n=18)
cornY=c(138.0,109.6,139.1,127.3,113.0,115.6,132.5,130.4,140.7,130.2,109.7,111.7,118.9,105.5,134.8)
z.test(x=cornY,stdev=12,conf.level=0.90,	n=15)
z.test(x=cornY,stdev=12,conf.level=0.95,	n=15)
z.test(x=cornY,stdev=12,conf.level=0.99,	n=15)
uniD=c(44,50,24,45,39,57,25,90,78,54)
z.test(x=uniD,	mu=60, stdev=3.5, alternative=c("greater"),	conf.level=0.95,	n=10)
uniD=c(44,50,24,45,39,57,25,90,78,54)
z.test(x=uniD,	mu=60, stdev=3.5, alternative=c("less"),	conf.level=0.95,	n=10)
#Question 08
bacA=c(200,312,165,223,190,327,250,180,206,197)
bacB=c(234,342,155,216,220,313,290,202,248,230)
t.test(x=bacA, y=bacB, alternative=("two.sided"), conf.level=0.95, paired =	FALSE, var.equal=TRUE);
dataR=c(999.1,1003.2,1002.1,999.2,989.7,1006.7,1012.3,996.4,1000.2,995.3,1008.7,993.4,998.1,997.9,1003.1,1002.6,1001.8,996.5)
z.test(x=dataR,	mu=997, stdev=6, alternative=c("two.sided"),	conf.level=0.95,n=18)
z.test(x=dataR,	mu=999, stdev=6, alternative=c("two.sided"),	conf.level=0.95,n=18)
z.test(x=dataR,	mu=1001, stdev=6, alternative=c("two.sided"),	conf.level=0.95,n=18)
z.test(x=dataR,	mu=1003, stdev=6, alternative=c("two.sided"),	conf.level=0.95,n=18)
#Question 08
bacA=c(200,312,165,223,190,327,250,180,206,197)
bacB=c(234,342,155,216,220,313,290,202,248,230)
t.test(x=bacA, y=bacB, alternative=("two.sided"), conf.level=0.95, paired =	FALSE, var.equal=TRUE);
z.test(x=61.8,	mu=60, stdev=6, alternative=c("greater"),	conf.level=0.95,	n=36)
cornY=c(138.0,109.6,139.1,127.3,113.0,115.6,132.5,130.4,140.7,130.2,109.7,111.7,118.9,105.5,134.8)
z.test(x=cornY,stdev=12,conf.level=0.90,	n=15)
z.test(x=cornY,stdev=12,conf.level=0.95,	n=15)
z.test(x=cornY,stdev=12,conf.level=0.99,	n=15)
#Question 02
z.test(x=0.15,	mu=0.1, stdev=0.17, alternative=c("two.sided"),	conf.level=0.99,	n=110)
#Question 07
z.test(x=75,	mu=60, stdev=30, alternative=("two.sided"),	conf.level=0.99,	n=36)
install.packages("DECIPHER");
x=c(4,2,3,4,7,5,7,10,12,1)
y=c(45,20,28,55,62,45,40,80,90,20)
plot(x,y)
plot(x,y,main="Corelation Graph",col="blue",pch=6)
plot(x,y,main="Corelation Graph",col="blue",pch=8)
ex1=cor.test(x, y,
alternative = c("two.sided"),
method = c("pearson"),
conf.level = 0.95)
ex1
r=lm(x~y)
summary(r)
x=c(4,2,3,4,7,5,7,10,12,1)
y=c(45,20,28,55,62,45,40,80,90,20)
plot(x,y,main="Corelation Graph",col="blue",pch=8)
ex1=cor.test(x, y,
alternative = c("two.sided"),
method = c("pearson"),
conf.level = 0.95)
ex1
r=lm(x~y)
summary(r)
r=lm(x,y)
summary(r)
plot(x,y)
abline(r)
abline(r)
print("Hello World!!")
library(ggplot2)
print("Hello World!!")
library(ggplot2)
x=10
y=30
p=0.59
q="apple"
r="a"
s=TRUE
sum(x,y)
prod(x,y)
sqrt(x)
mean(y)
mean(y)
y^3
#EX01
yields=c(3.56,5.0,4.88,4.93,3.92,4.25,5.12,5.13,4.79,4.45,5.35,4.81,3.48,4.45,4.72)
res=t.test(x=yields,
alternative = c("greater"),
mu = 4.35, var.equal = T,
conf.level = 0.95)
res
#EX02
library(TeachingDemos)
#EX02
library(TeachingDemos)
res=z.test(x=0.15, mu = 0.1, stdev=0.17, alternative = c("two.sided"),
n=110, conf.level = 0.01)
res
#EX03
Urea=c(69,66,71,69,68,71,74,69,73,70)
AS=c(68,69,66,64,67,69,65,71,68,70,65,63,66,68,66,72,69,67,66,61)
res=t.test(x=Urea, y = AS,
alternative = c("two.sided"),
paired = FALSE, var.equal = T,
conf.level = 0.95)
res
#EX04
thrust=c(999.1,1003.2,1002.1,999.2,989.7,1006.7,1012.3,996.4,1000.2,995.3,1008.7,993.4,998.1,997.9,1003.1,1002.6,1001.8,996.5)
#Scientist A
resA=z.test(x=thrust, mu = 997, stdev=6, alternative = c("two.sided"),
conf.level = 0.95)
resA
#Scientist B
resB=z.test(x=thrust, mu = 999, stdev=6, alternative = c("two.sided"),
conf.level = 0.95)
resB
#Scientist C
resC=z.test(x=thrust, mu = 1001, stdev=6, alternative = c("two.sided"),
conf.level = 0.95)
resC
#Scientist D
resD=z.test(x=thrust, mu = 1003, stdev=6, alternative = c("two.sided"),
conf.level = 0.95)
resD
yield=c(138.0,139.1,113.0,132.5,140.7,109.7,118.9,134.8,109.6,127.3,115.6,130.4,130.2,111.7,105.5)
res=z.test(x=yield,stdev=12,
conf.level = 0.90)
res
res=z.test(x=yield,stdev=12,
conf.level = 0.95)
res
res=z.test(x=yield,stdev=12,
conf.level = 0.99)
res
#EX06
ratings=c(44,50,24,45,39,57,25,90,78,54)
res=z.test(x=ratings, mu = 60, stdev=3.5, alternative = c("less"),
conf.level = 0.95)
res
#EX07
res=z.test(x=75, mu = 60, stdev=30, alternative = c("two.sided"),
n=36, conf.level = 0.99)
res
x=c(4,2,3,4,7,5,7,10,12,1)
y=c(45,20,28,55,62,45,40,80,90,20)
plot(x,y)
plot(x,y,col="red",pch=8)
cor.test(x, y,
alternative = c("two.sided"),
method = c("pearson"),
conf.level = 0.95)
reg=lm(x~y)
summary(reg)
reg=lm(y~x)
summary(reg)
plot(x,y,col="red",pch=8)
abline(reg)
v=c(14.3,15.2,11.3,16.7,9.2,12.5)
mean(v)
sum(v)/length(v)
#Numeric Data Type
x=10.5
#Character Data Type
y="Anushka"
#Boolean Data Types
z=TRUE
#Accessing the vector
v[1]
v[4]
v[-1]
v[-2]
v[2:]
v[2;]
#Data Frames
df=data.frame(Name=c("Amal","Kamal","Sunil","Nimal"),age=c(28,32,24,39))
df
df=data.frame(ExL=c(11.2,14.3,8.8,15.1),gene=c("G1","G7","G11","G12"))
df
mean(df$ExL)
mean(df[,1])
df[1,2]
df[2,1]
#Find the expression level of gene 7
df$ExL[df$gene=="G7"]
#Sequences
1:5
5;1
1:10:0.1
1:10,0.1
1:5+1:5
#Control Structures
#for loops
myDna=sample(c("A","T","G","C"),n=100,replace=T)
#Control Structures
#for loops
myDna=sample(c("A","T","G","C"),size=100,replace=T)
Acount=0
Tcount=0
Gcount=0
Ccount=0
#Control Structures
#for loops
myDna=sample(c("A","T","G","C"),size=100,replace=T)
Acount=0
Tcount=0
Gcount=0
Ccount=0
for(base in myDna){
if(base=="A"){
Acount=Acount+1
}else if(base=="T"){
Tcount=Tcount+1
}else if(base=="G"){
Gcount=Gcount+1
}else if(base=="C"){
Ccount=Ccount+1
}
}
cat("A count:",Acount,"\nTcount:",Tcount,"\nGcount:",Gcount,"\nCcount:",Ccount)
for(i in 1:12){
cat("12 X",i,"=",12*i)
}
for(i in 1:12){
cat("12 X",i,"=",12*i,"\n")
}
print(x)
#while loop
x=1
while(x<10){
print(x)
}
#while loop
x=1
while(x<10){
print(x)
}
x=x+1
#while loop
x=1
while(x<10){
print(x)
x=x+1
}
#if condition
while TRUE{
num=readline()
}
#if condition
while (TRUE){
num=readline()
print(num)
}
#if condition
while (TRUE){
num=readline()
num=as.integer(num)
}
#if condition
while (TRUE){
num=readline()
num=as.integer(num)
}
#if condition
while (TRUE){
num=readline()
num=as.integer(num)
}
#while loop
x=1
while(x<10){
print(x)
x=x+1
}
#if condition
while (TRUE){
num=readline()
num=as.integer(num)
}
#Singular Value Decomposition(SVD)
library(mass)
#Singular Value Decomposition(SVD)
library(MASS)
svd
n=100
y=t(mvrnorm(n,c(0,0),matrix(c(1,0.95,0.95,1),2,2)))
y
svd(y)
#Lecture 03
matrix(data = c(4,-5,-1,7,-2,3,-1,4,-3,8,2,6), nrow = 4, ncol = 3, byrow = T,
dimnames = NULL)
#Lecture 03
A=matrix(data = c(4,-5,-1,7,-2,3,-1,4,-3,8,2,6), nrow = 4, ncol = 3, byrow = T,
dimnames = NULL)
svd(A)
z=svd(A)
A
z$d**2
prop.table(z$d**2)
z$u[,1]%*%diag(z$d[1])%*%z$v[,1]
z$u%*%diag(z$d[1])%*%t(z$v)
z$u%*%diag(z$d)%*%t(z$v)
as.matrix(z$u[,1:2])%*%diag(z$d[1:2])%*%t(as.matrix(z$v[,1:2])
as.matrix(z$u[,1:2])%*%diag(z$d[1:2])%*%t(as.matrix(z$v[,1:2]))
as.matrix(z$u[,1:2])%*%diag(z$d[1:2])%*%t(as.matrix(z$v[,1:2]))
A=matrix(data = c(4,-5,-1,7,-2,3,-1,4,-3,8,2,6), nrow = 4, ncol = 3, byrow = T,
dimnames = NULL)
A
D=matrix(c(2.5,0.5,2.2,1.9,3.1,2.3,2.0,1.0,1.5,1.1,2.4,0.7,2.9,2.2,3.0,2.7,1.6,1.1,1.6,0.9),nrow = 10,ncol = 2,byrow = F)
D
DT=t(D)
DT
plot(DT[1,],DT[2,])
D=matrix(c(2.5,0.5,2.2,1.9,3.1,2.3,2.0,1.0,1.5,1.1,2.4,0.7,2.9,2.2,3.0,2.7,1.6,1.1,1.6,0.9),nrow = 10,ncol = 2,byrow = F)
D
DT=t(D)
DT
plot(DT[1,],DT[2,])
mean(DT[1,])
mean(DT[2,])
plot(DT[1,],DT[2,])
par(mar=c(1,1,1,1))
plot(DT[1,],DT[2,])
DT[2,]=DT[2,]-mean(DT[2,])
DT
plot(DT[1,],DT[2,])
par(mar=c(5,4,4,2)+0.1)
plot(DT[1,],DT[2,])
#Principal Component Analysis
D=matrix(c(2.5,0.5,2.2,1.9,3.1,2.3,2.0,1.0,1.5,1.1,2.4,0.7,2.9,2.2,3.0,2.7,1.6,1.1,1.6,0.9),nrow = 10,ncol = 2,byrow = F)
D
DT=t(D)
DT
par(mar=c(5,4,4,2)+0.1)
plot(DT[1,],DT[2,])
mean(DT[1,])
mean(DT[2,])
DT[1,]=DT[1,]-mean(DT[1,])
DT[2,]=DT[2,]-mean(DT[2,])
DT
plot(DT[1,],DT[2,])
#covariance
cov.matrix=var(t(DT))
cov.matrix
#Eigenvalues and eigen vectors
eigen(cov.matrix)
#Identify the eigenvector associated with eigenvalue 0.0490834
w=eigen(cov.matrix)$vectors
WT=t(w)
WT
#PCA
DPCA=WT%*%DT
DPCA
#Using prcomp
?prcomp
?princomp
D
pca=prcomp(D,center = T)
pca$x
plot(pca$x[,1],pca$x[,2])
par(mar=c(5,4,4,2)+0.1)
plot(pca$x[,1],pca$x[,2])
summary(pca)
screeplot(pca)
par(mar=c(5,4,4,2)+0.1)
screeplot(pca)
shiny::runApp('C:/Users/Anushka/Desktop/Anushka/Research/Methodology/my_app')
?imageOutput
?imageOutput
runApp('C:/Users/Anushka/Desktop/Anushka/Research/Methodology/my_app')
runApp('C:/Users/Anushka/Desktop/Anushka/Research/Methodology/my_app')
#Print User Input
#install.packages("shiny")
library(shiny)
#install.packages("shinythemes")
library(shinythemes)
#Define UI
ui<-fluidPage(
titlePanel(h1(strong("Microbial Co-Occurrence Networks"))),
sidebarLayout(
position = "left",
sidebarPanel(h2(strong("Upload Data")),
br(),
fileInput(inputId="TaxaFile",label="Browse Taxa File",accept=".qza"),
fileInput(inputId="OTUFile",label="Browse OTU File",accept=".qza"),
fileInput(inputId="MetaFile",label="Browse Meta Data File",accept=".txt"),
selectInput(inputId = "Method",label="Select Network COnstruction Method",
choices=c("SparCC"="Sparcc","SPRING"="Spring")),
selectInput(inputId = "CattleParameter",label="Select Cattle Parameter",
choices=c("Cattle Breed"="Breed","Lactation Phase"="Phase")),
selectInput(inputId = "LactationPhase",label="Select Lactation Phase",
choices=c("Early Phase"="EarlyPhase","Mid Phase"="MidPhase","Late Phase"="LatePhase","Dry Phase"="DryPhase")),
textOutput("result")
),
mainPanel(#h3(strong("View Network",align="center",style="color:blue")),
#strong("Let's see how to make these networks"),
textOutput("selected_var"),
br(),
#img(src=Method+"_"+CattleParameter+"_"+LactationPhase+".png")
)
)
getwd()
setwd("C:\\Users\\Anushka\\PycharmProjects\\MilkMicrobiome\\pval")
read.table("Asian_Cluster1.txt")
DataFrame=read.table("Asian_Cluster1.txt")
DataFrame=order(DataFrame$V2,decreasing = F)
DataFrame
DataFrame=DataFrame[order(DataFrame$V2,decreasing = F)]
DataFrame=DataFrame[order(DataFrame$V2,decreasing = F),]
DataFrame=read.table("Asian_Cluster1.txt")
DataFrame
print(DataFrame[order(DataFrame$V2,decreasing = F),])
DataFrame
DataFrame[DataFrame$V2<0.05]
DataFrame[(DataFrame$V2)<0.05]
DataFrame$V2
DataFrame$V2<0.05
DataFrame(DataFrame$V2<0.05)
DataFrame[DataFrame$V2<0.05]
typeof(DataFrame)
library(dplyr)
arrange(DataFrame,v2)
arrange(DataFrame,DataFrame$v2)
arrange(DataFrame,v2)
install.packages("data.table")
arrange(DataFrame,V2)
write.table(DataFrame,"Asian_Cluster1.txt")
setwd("C:\\Users\\Anushka\\Desktop\\Anushka\\Research\\Methodology\\New folder\\FinalRes\\Pvals")
write.table(DataFrame,"Asian_Cluster1.txt")
getwd()
setwd("C:\\Users\\Anushka\\PycharmProjects\\MilkMicrobiome\\pval")
DataFrame=read.table("Asian_Cluster1.txt")
DataFrame$V2
DataFrame=arrange(DataFrame,V2)
setwd("C:\\Users\\Anushka\\Desktop\\Anushka\\Research\\Methodology\\New folder\\FinalRes\\Pvals")
write.table(DataFrame,"Asian_Cluster1.txt")
getwd()
setwd("C:\\Users\\Anushka\\PycharmProjects\\MilkMicrobiome\\pval")
fileList=list.files(path="C:\\Users\\Anushka\\PycharmProjects\\MilkMicrobiome\\pval",pattern = ".csv")
fileList
setwd("C:\\Users\\Anushka\\PycharmProjects\\MilkMicrobiome")
fileList=list.files(path="pval",pattern = ".csv")
fileList
setwd("C:\\Users\\Anushka\\PycharmProjects\\MilkMicrobiome")
fileList=list.files(path="pval",pattern = ".txt")
fileList
for(i in fileList){
DataFrame=read.table(i)
DataFrame=arrange(DataFrame,V2)
print(DataFrame)
}
for(i in fileList){
setwd("C:\\Users\\Anushka\\PycharmProjects\\MilkMicrobiome\\pval")
DataFrame=read.table(i)
DataFrame=arrange(DataFrame,V2)
print(DataFrame)
}
for(i in fileList){
setwd("C:\\Users\\Anushka\\PycharmProjects\\MilkMicrobiome\\pval")
DataFrame=read.table(i)
DataFrame=arrange(DataFrame,V2)
print(DataFrame)
setwd("C:\\Users\\Anushka\\Desktop\\Anushka\\Research\\Methodology\\New folder\\FinalRes\\Pvals")
write.table(DataFrame,i)
}
